<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ljm.dao.BlogRemarkMapper">
  <resultMap id="BaseResultMap" type="com.ljm.bean.BlogRemark">
    <id column="blog_remark_id" jdbcType="INTEGER" property="blogRemarkId" />
    <result column="blog_id" jdbcType="INTEGER" property="blogId" />
    <result column="remarker" jdbcType="INTEGER" property="remarker" />
    <result column="remark_content" jdbcType="VARCHAR" property="remarkContent" />
    <result column="remark_time" jdbcType="TIMESTAMP" property="remarkTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    blog_remark_id, blog_id, remarker, remark_content, remark_time
  </sql>
  <select id="selectByExample" parameterType="com.ljm.bean.BlogRemarkExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog_remark
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from blog_remark
    where blog_remark_id = #{blogRemarkId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blog_remark
    where blog_remark_id = #{blogRemarkId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ljm.bean.BlogRemarkExample">
    delete from blog_remark
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ljm.bean.BlogRemark">
    insert into blog_remark (blog_remark_id, blog_id, remarker, 
      remark_content, remark_time)
    values (#{blogRemarkId,jdbcType=INTEGER}, #{blogId,jdbcType=INTEGER}, #{remarker,jdbcType=INTEGER}, 
      #{remarkContent,jdbcType=VARCHAR}, #{remarkTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ljm.bean.BlogRemark">
    insert into blog_remark
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blogRemarkId != null">
        blog_remark_id,
      </if>
      <if test="blogId != null">
        blog_id,
      </if>
      <if test="remarker != null">
        remarker,
      </if>
      <if test="remarkContent != null">
        remark_content,
      </if>
      <if test="remarkTime != null">
        remark_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blogRemarkId != null">
        #{blogRemarkId,jdbcType=INTEGER},
      </if>
      <if test="blogId != null">
        #{blogId,jdbcType=INTEGER},
      </if>
      <if test="remarker != null">
        #{remarker,jdbcType=INTEGER},
      </if>
      <if test="remarkContent != null">
        #{remarkContent,jdbcType=VARCHAR},
      </if>
      <if test="remarkTime != null">
        #{remarkTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ljm.bean.BlogRemarkExample" resultType="java.lang.Long">
    select count(*) from blog_remark
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update blog_remark
    <set>
      <if test="record.blogRemarkId != null">
        blog_remark_id = #{record.blogRemarkId,jdbcType=INTEGER},
      </if>
      <if test="record.blogId != null">
        blog_id = #{record.blogId,jdbcType=INTEGER},
      </if>
      <if test="record.remarker != null">
        remarker = #{record.remarker,jdbcType=INTEGER},
      </if>
      <if test="record.remarkContent != null">
        remark_content = #{record.remarkContent,jdbcType=VARCHAR},
      </if>
      <if test="record.remarkTime != null">
        remark_time = #{record.remarkTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update blog_remark
    set blog_remark_id = #{record.blogRemarkId,jdbcType=INTEGER},
      blog_id = #{record.blogId,jdbcType=INTEGER},
      remarker = #{record.remarker,jdbcType=INTEGER},
      remark_content = #{record.remarkContent,jdbcType=VARCHAR},
      remark_time = #{record.remarkTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ljm.bean.BlogRemark">
    update blog_remark
    <set>
      <if test="blogId != null">
        blog_id = #{blogId,jdbcType=INTEGER},
      </if>
      <if test="remarker != null">
        remarker = #{remarker,jdbcType=INTEGER},
      </if>
      <if test="remarkContent != null">
        remark_content = #{remarkContent,jdbcType=VARCHAR},
      </if>
      <if test="remarkTime != null">
        remark_time = #{remarkTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where blog_remark_id = #{blogRemarkId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ljm.bean.BlogRemark">
    update blog_remark
    set blog_id = #{blogId,jdbcType=INTEGER},
      remarker = #{remarker,jdbcType=INTEGER},
      remark_content = #{remarkContent,jdbcType=VARCHAR},
      remark_time = #{remarkTime,jdbcType=TIMESTAMP}
    where blog_remark_id = #{blogRemarkId,jdbcType=INTEGER}
  </update>
</mapper>